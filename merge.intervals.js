let input1 = [
    [1, 3],
    [2, 6],
    [8, 10],
    [15, 18],
]; // [[1, 6], [8, 10], [15, 18]]

let input2 = [
    [1, 4],
    [4, 5],
]; // [[1, 5]]

let input3 = [
    [11, 12],
    [2, 3],
    [5, 7],
    [1, 4],
    [8, 10],
    [6, 8],
]; // [[1, 4], [5, 10], [11, 12]]

function merge(intervals) {
    // 1. Обработка краевых случаев: Если интервалов 0 или 1, объединять нечего.
    if (intervals.length < 2) {
        return intervals;
    }

    // 2. Сортировка интервалов по их начальному времени.
    // Это ключевой момент, так как гарантирует, что при рассмотрении интервала
    // любые потенциальные предыдущие пересечения уже были обработаны с 'последним' интервалом.
    intervals.sort((a, b) => a[0] - b[0]);

    // 3. Инициализация результирующего массива первым отсортированным интервалом.
    // Это будет наш первый "последний объединенный интервал".
    const result = [intervals[0]];

    // 4. Итерация по всем интервалам для поиска пересечений и объединения.
    // Цикл начинается с первого элемента, который уже находится в `result`.
    // Внутренняя логика обрабатывает это корректно, эффективно обрабатывая элементы со второго и далее.
    for (const currentInterval of intervals) {
        // Получаем последний интервал, добавленный/объединенный в наш результат.
        const lastMergedInterval = result[result.length - 1];

        // Проверяем на пересечение: Если конец последнего объединенного интервала
        // больше или равен началу текущего интервала.
        // Пример: [1, 5] и [3, 7] -> 5 >= 3 (пересечение)
        // Пример: [1, 4] и [4, 5] -> 4 >= 4 (касание, также считается пересечением)
        if (lastMergedInterval[1] >= currentInterval[0]) {
            // Пересечение существует: Объединяем, расширяя конец lastMergedInterval.
            // Новый конец - это максимум из текущего конца и конца currentInterval.
            lastMergedInterval[1] = Math.max(
                lastMergedInterval[1],
                currentInterval[1]
            );
        } else {
            // Пересечения нет: Текущий интервал начинается после окончания последнего объединенного интервала.
            // Это означает, что lastMergedInterval завершен, и currentInterval начинает новый объединенный сегмент.
            result.push(currentInterval);
        }
    }

    // Возвращаем массив объединенных интервалов.
    return result;
}

// Вывод в консоль
console.log(merge(input1));
console.log(merge(input2));
console.log(merge(input3));
